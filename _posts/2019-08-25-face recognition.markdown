---
title:  “Face Recognition”
mathjax: true
layout: post
date:   2019-08-25 08:00:12 +0800
categories: deeplearning.ai
---

人脸识别(Face Recognition)是卷积神经网络最后一周的课程。首先人脸验证(Face Verification)和人脸识别(Face Recognition)是有区别的。人脸验证问题是指输入一张图片和某人的ID，系统需要验证图片是否是这个人（1对1问题）；人脸识别则是输入一张图片，如果图片中的人存在于数据库中则输出其ID（1对多问题）。


# One-Shot学习

人脸识别所面临的一个挑战就是需要解决一次学习问题，即需要通过单单一张图片或者一个人脸样例就能识别这个人，因为数据库中每个人可能都只有一张照片。而通常深度学习只有一个训练样例时，它的表现并不好。

为了让人脸识别一次学习能有更好的效果，需要做的是学习Similarity函数。以两张照片作为输入，然后输出两张照片的差异值。如果放进同一个人的两张照片，希望它输出一个很小的值；如果放进长相差别很大的人的照片，它应该输出一个很大的值。识别过程中，设定一个阈值$$\tau$$来判断两张图片是否是同一个人。

# Siamese网络

Siamese网络即是一个输入两张人脸，输出相似度的网络。之前的卷积网络，经过一系列卷积，池化和全连接层操作后，得到一个特征向量；这个特征向量被送进softmax单元做分类。Siamese定义两张图片的特征向量的距离为$$d(x^{(1)},x^{(2)}) = \Vert f(x^{(1)}) - f(x^{(2)}) \Vert ^2$$，
其中$$x^{(1)}, x^{(2)}$$代表两个输入图片，$$f(x^{(1)}), f(x^{(2)})$$分别是两个图片的编码（特征向量）。

![image01]({{site.baseurl}}/image/20190825/siamese.png)

我们的目标是训练Siamese神经网络的参数，得到一张图片好的编码。下面讨论目标函数的定义。

1. 三元组损失函数（Triplet Loss Function）

    三元组损失同时看三张图片，Anchor图片，Positive图片和Negative图片，简写成$$A, P, N$$。$$\alpha$$是间隔参数，它拉大了Anchor图片与Positive图片对和Anchor图片与Negative图片对之间的距离：

    $$
    || f(A) - f(P) ||^2 - || f(A) - f(N) ||^2 + \alpha \leq 0
    $$

    定义损失函数：

    $$
    L(A,P,N) = max(|| f(A) - f(P) ||^2 - || f(A) - f(N) ||^2 + \alpha, 0)
    $$

    $$max$$函数的作用就是，只要$$\Vert f(A) - f(P) \Vert^2 - \Vert f(A) - f(N) \Vert^2 + \alpha \leq 0$$条件满足，损失函数就是0。如果$$\Vert f(A) - f(P) \Vert^2 - \Vert f(A) - f(N) \Vert^2 + \alpha > 0$$，得到一个正的损失值。通过优化参数尽量使损失函数小于等于0。

    整个网络的代价函数是训练集中三元组损失总和。为了训练Siamese网络，需要一个数据集，里面有同一个人的多个照片。如果随机从训练集中选择$$A,P,N$$，约束条件$$d(A,P) + \alpha \leq d(A,N)$$很容易达到，网络并不能从中学到什么。因此$$A,P,N$$的选择尽可能使得$$d(A,P)$$接近$$d(A,N)$$。

    ![image02]({{site.baseurl}}/image/20190825/siamese_train.png)

2. 人脸识别与二分类

    另外一种训练参数的方法是将人脸识别当成一个二分类问题。选取一对Siamese神经网络(参数相同），将其输入到逻辑回归单元，如果是相同的人，输出是1，否则是0。训练集是成对的照片，而不是三个一组。预测值$$\hat y$$：

    $$
    \hat y = \sigma(\sum_{k=1}^{128} w_k |f(x^{(i)})_k - f(x^{(j)})_k| + b)
    $$

    符合$$f(x^{(i)})_k$$代表图片$$x^{(i)}$$的编码，下标$$k$$代表这个向量中第$$k$$个元素，$$\vert f(x^{(i)})_k - f(x^{(j)})_k \vert$$对两个编码取元素差的绝对值。

    ![image03]({{site.baseurl}}/image/20190825/binary_classification.png)